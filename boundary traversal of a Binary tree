class Solution {
public:

    void leftorder(Node*root , vector<int> &ans )
    {
    if(root == NULL || (root->left == NULL & root->right == NULL))
        return ;
        
    ans.push_back(root->data);
    
    if(root->left) leftorder(root->left, ans);
        
    else  leftorder(root->right ,ans);
       
    
    }

// leaf 
    void leaforder(Node* root , vector<int> & ans)
    {
        if(root== NULL ) return ;
        if(root->left == NULL && root->right == NULL)
        {
            ans.push_back(root->data);
            return ;
        }
        leaforder(root->left , ans);
        leaforder(root->right , ans);
    }
    
    // right order traverseal of the tree 
    void rightorder(Node*root , vector<int> & ans)
    {
        if(root == NULL || (root ->left == NULL && root->right == NULL)) return ;
        
        if(root->right)
            rightorder(root->right ,ans);
        else
            rightorder(root->left ,ans);
            
        ans.push_back(root->data);
    }
    
    
    vector <int> boundary(Node *root)
    {
        vector<int> ans;
        
        if(root == NULL) return ans;
        
        // left traversal ;
        ans.push_back(root->data);
        leftorder(root->left, ans);
        
        // traverse leaf ;
        leaforder(root->left, ans);
        leaforder(root->right , ans);
        
        // traverse the right side of the root :
        rightorder(root ->right, ans);
        return ans;
    }
};
